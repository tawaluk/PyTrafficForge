"""Абстракция поведения генератора трафика"""

from typing import Any, Protocol

from entities.data_objects.elementary import NetProtocols
from entities.data_objects.traffic_generator import TrafficConfig, TrafficProfile


class ITrafficController(Protocol):
    """Абстракция управления генерацией трафика"""

    def start_traffic(self, config: TrafficConfig) -> bool: ...
    def stop_traffic(self) -> bool: ...
    def pause_traffic(self) -> bool: ...
    def resume_traffic(self) -> bool: ...
    def is_running(self) -> bool: ...

class ITrafficConfigurator(Protocol):
    """Абстракция конфигурации трафика"""

    def validate_config(self, config: TrafficConfig) -> bool: ...
    def set_traffic_profile(self, profile: TrafficProfile, config: dict[str, Any]) -> bool: ...
    def get_supported_protocols(self) -> list[NetProtocols]: ...
    def estimate_performance(self, config: TrafficConfig) -> dict[str, Any]: ...

class IGeneratorMonitor(Protocol):
    """Абстракция мониторинга генератора"""

    def get_current_stats(self) -> dict[str, Any]: ...
    def get_health_status(self) -> dict[str, Any]: ...
    def get_interface_utilization(self) -> dict[str, float]: ...
    def get_error_counters(self) -> dict[str, int]: ...

class IAdvancedTrafficFeatures(Protocol):
    """Абстракция продвинутых функций (опционально)"""

    def generate_malformed_packets(self, config: TrafficConfig) -> bool: ...
    def replay_pcap(self, pcap_path: str, speed_multiplier: float) -> bool: ...
    def start_attack_simulation(self, attack_type: str) -> bool: ...
