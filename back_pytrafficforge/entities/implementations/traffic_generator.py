from typing import Any, Protocol

from entities.data_objects.elementary import NetProtocols
from entities.data_objects.traffic_generator import (
    TrafficConfig,
    TrafficGeneratorData,
    TrafficProfile,
)


class ITrafficGeneratorImplementation(Protocol):
    """Интерфейс реализации генератора нагрузки - объединяет данные и поведение"""

    @property
    def data(self) -> TrafficGeneratorData: ...

    def start_traffic(self, config: TrafficConfig) -> bool: ...
    def stop_traffic(self) -> bool: ...
    def pause_traffic(self) -> bool: ...
    def resume_traffic(self) -> bool: ...
    def is_running(self) -> bool: ...

    def validate_config(self, config: TrafficConfig) -> bool: ...
    def set_traffic_profile(self, profile: TrafficProfile, config: dict[str, Any]) -> bool: ...
    def get_supported_protocols(self) -> list[NetProtocols]: ...
    def estimate_performance(self, config: TrafficConfig) -> dict[str, Any]: ...

    def get_current_stats(self) -> dict[str, Any]: ...
    def get_health_status(self) -> dict[str, Any]: ...
    def get_interface_utilization(self) -> dict[str, float]: ...
    def get_error_counters(self) -> dict[str, int]: ...

    def get_max_capabilities(self) -> dict[str, Any]: ...
    def can_handle_config(self, config: TrafficConfig) -> bool: ...
    def reset_counters(self) -> bool: ...
